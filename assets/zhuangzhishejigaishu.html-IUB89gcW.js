import{_ as p,c as u,a as o,d as e,e as t,w as i,b as s,r as d,o as a}from"./app-Dz-QiKXn.js";const m={},f={href:"http://139.9.4.173/client/gene-ui/dist/index.html#/login",target:"_blank",rel:"noopener noreferrer"},b={href:"http://124.71.0.179/#/login",target:"_blank",rel:"noopener noreferrer"},B=["src"],A={href:"https://github.com/Edinburgh-Genome-Foundry/SnapGeneReader",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/linsalrob/py_fasta_validator",target:"_blank",rel:"noopener noreferrer"},N={href:"http://synbiodex.github.io/SBOL-Validator/#introduction",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/Edinburgh-Genome-Foundry/DnaChisel",target:"_blank",rel:"noopener noreferrer"},k={href:"https://edinburgh-genome-foundry.github.io/DnaChisel/genbank/genbank_notes.html#",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/Edinburgh-Genome-Foundry/GoldenHinges",target:"_blank",rel:"noopener noreferrer"},y={href:"https://edinburgh-genome-foundry.github.io/GoldenHinges/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://ligasefidelity.neb.com/getset/run.cgi",target:"_blank",rel:"noopener noreferrer"},h={class:"custom-container tip"},G={href:"https://pubs.acs.org/doi/10.1021/acssynbio.8b00333",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6061786/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0238592",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/Edinburgh-Genome-Foundry/BandWagon",target:"_blank",rel:"noopener noreferrer"},x={href:"https://edinburgh-genome-foundry.github.io/BandWagon/index.html#",target:"_blank",rel:"noopener noreferrer"},O={href:"https://github.com/Edinburgh-Genome-Foundry/BandWitch",target:"_blank",rel:"noopener noreferrer"},w={href:"https://edinburgh-genome-foundry.github.io/BandWitch/index.html#",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/libnano/primer3-py",target:"_blank",rel:"noopener noreferrer"},R={href:"https://libnano.github.io/primer3-py/",target:"_blank",rel:"noopener noreferrer"};function F(g,n){const r=d("ExternalLinkIcon"),l=d("RouteLink");return a(),u("div",null,[n[67]||(n[67]=o("h1",{id:"装置设计概述",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#装置设计概述"},[o("span",null,"装置设计概述")])],-1)),n[68]||(n[68]=o("h2",{id:"dna组装自动化流程-系统集成",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#dna组装自动化流程-系统集成"},[o("span",null,"DNA组装自动化流程（系统集成）")])],-1)),o("p",null,[n[2]||(n[2]=e("下面是")),o("a",f,[n[0]||(n[0]=e("装置设计")),t(r)]),n[3]||(n[3]=e("联合")),o("a",b,[n[1]||(n[1]=e("元件库")),t(r)]),n[4]||(n[4]=e("及")),n[5]||(n[5]=o("a",{href:""},"云实验室",-1)),n[6]||(n[6]=e("实现DNA自动化组装的概览图："))]),o("img",{src:g.$withBase("/device-design/images/装置设计概览-1-自动化概览图.png"),alt:"装置设计概览-1-自动化概览图"},null,8,B),n[69]||(n[69]=o("p",null,"上图中所示的4个模块（依赖于三个软件系统的功能集成，其中BioCAD模块和Algorithms模块均属于装置设计软件系统）是DNA自动化组装流程实现的关键：",-1)),o("ul",null,[o("li",null,[o("p",null,[n[8]||(n[8]=e("1）元件库模块：DNA组装设计的第一步便是定义各组装元件，纵使装置设计提供了直接从本地选择目标序列文件或直接粘贴序列到输入框，但我们仍建议从元件库软件系统中选择已登记注册的元件。这可以通过在装置设计的")),t(l,{to:"/docs/device-design/more/%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D.html#%E5%85%B3%E8%81%94%E8%B4%A6%E6%88%B7"},{default:i(()=>n[7]||(n[7]=[e("【关联账户】")])),_:1,__:[7]}),n[9]||(n[9]=e("中事先绑定用户的元件库账号。"))])]),o("li",null,[o("p",null,[n[11]||(n[11]=e("2）BioCAD模块：在装置设计软件系统中，BioCAD模块可狭义地认为特指装置设计软件系统中")),t(l,{to:"/docs/device-design/more/%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D.html#%E7%94%BB%E5%B8%83%E9%A1%B5%E7%BC%96%E8%BE%91"},{default:i(()=>n[10]||(n[10]=[e("【画布】页面")])),_:1,__:[10]}),n[12]||(n[12]=e("各项可视化交互操作等功能的集合。该模块给DNA组装设计的研究者提供了一系列友好的前端交互操作，可以辅助研究者进行DNA序列（目标载体、DNA组装片段）的选取、序列优化、组装片段排序或布局、组装参数设置、质控参数设置等，并实现边设计边生成JSON格式的设计模型，该模型中包含画布页面所有关键信息，将作为下一个Algorithms模块的重要输入。"))])]),o("li",null,[o("p",null,[n[14]||(n[14]=e("3）Algorithms模块：此部分是装置设计中的生物信息算法模块，在【画布】页面 执行DNA组装设计中引物设计、输出组装方案的核心算法模块。以BioCAD模块生成的JSON格式的设计模型为输入，首先获取各组装片段（①目标组装区域可能并不是原始的序列，而是序列中的某个区域；②目标组装片段可能需要在原始序列基础上进行序列优化，对优化后的组装片段装置设计会推荐以直接合成/购买的方式获取；等等）及排列或组合顺序（从JSON模型中获取DNA组装设计的布局，是单一的组装还是排列组合式的文库组装），随后执行模拟组装（模拟组装不会真正计算引物，仅获取到每个组装产物的输入序列和排列顺序）；根据上一步模拟组装的结果，对设计中每个组装进行各种校验，主要包括序列校验（如Golden Gate组装中需校验组装序列中间是否含有额外的酶切位点；Gibson组装中需校验组装序列间是否存在高度同源序列而造成片段装配顺序混乱；等等）、Eugene校验（排除掉不符合")),n[15]||(n[15]=o("a",{href:""},"Eugene规则",-1)),n[16]||(n[16]=e("的结果）、校验现有算法是否能处理每个单一组装实例（此校验主要受限于现有算法的功能，对于无法处理的特殊组装将予以warning提示。算法的限制将在")),t(l,{to:"/docs/device-design/more/%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D.html"},{default:i(()=>n[13]||(n[13]=[e("案例介绍")])),_:1,__:[13]}),n[17]||(n[17]=e("部分对每个设计类型的组装算法限制进行详细阐述），校验步骤若发现阻碍组装的原因将抛出warning到BioCAD模块的前端页面以提醒用户，用户可以根据提示信息调整设计（主要是调整组装序列）再次尝试；校验通过后将根据从JSON模型中获取到的组装类型执行后续不同的算法："))]),n[18]||(n[18]=s('<ul><li><p>① 对于SLIC/Gibson/CPEC/SLiCE类型的组装，根据其同源组装原理，首先给每个组装片段设计带有临近组装片段侧翼同源序列的PCR扩增引物，输出PCR扩增产物序列（用以下游PCR扩增纯化后做校验），计算最优的组装顺序（如果可能出现片段错配，则会推荐将互相兼容的临近的片段先组装成contigs，最后再将contigs组装成最终产物），输出组装产物序列等信息；</p></li><li><p>② 对于Golden Gate类型的组装，先判断是从PCR开始还是从未切割的序列开始。若是从PCR开始，则先计算片段间兼容的一组黏末端，再给每个组装片段设计带有指定酶切位点的PCR引物，输出PCR扩增产物序列、组装终产物序列。若是从未切割的序列开始，则直接根据指定的TypeIIs酶给每个组装序列做<em>insilico</em>酶切后，将片段按照酶切产生的黏末端按序连接在一起，输出每一层级组装产物序列；</p></li><li><p>③ 对于Mutation类型的组装，根据当前Algorithms模块能处理的Mutation场景（<a href="">详见</a>），首先根据用户定义的突变位点将原始序列片段化，设计Level 0 PCR引物及突变引物，输出Level 0产物和Level 1产物及目标突变终产物的序列。</p></li></ul><p>将以上计算结果整理输出报告，报告主要包括三类：</p><ul><li><p>① JSON格式的组装方案：此格式是计算机易读、易解析的，用以对接下游自动化实验系统；</p></li><li><p>② Excel格式的组装方案：此格式是人易读、易理解的，供用户查阅；</p></li><li><p>③ 序列文件：DNA组装设计的中间产物及组装终产物的DNA序列图谱，供用户下载后在其他序列编辑软件中查阅，方便试验后QC阶段做序列比对，同时可以通过调用元件库软件的应用功能接口将序列文件保存至元件库。</p></li></ul><p>上述仅简单介绍了每种类型设计里算法的主要计算任务和结果概览，在<a href="">输出结果</a>部分将更仔细地介绍这部分内容。</p>',4))]),o("li",null,[o("p",null,[n[20]||(n[20]=e("4）云实验室模块：在装置设计中，用户可以在")),t(l,{to:"/docs/device-design/more/%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D.html#%E6%8A%A5%E5%91%8A%E5%88%97%E8%A1%A8"},{default:i(()=>n[19]||(n[19]=[e("【报告列表】")])),_:1,__:[19]}),n[21]||(n[21]=e("中将Algorithms模块运行生成的组装方案（主要是指JSON格式的组装方案）通过点击【构建】发送到下游自动化云实验室。云实验室软件系统会解析JSON格式的组装方案中的信息安排自动化实验，并反馈实验进度和实验结果到装置设计。"))])])]),n[70]||(n[70]=o("h2",{id:"algorithms模块的工具依赖",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#algorithms模块的工具依赖"},[o("span",null,"Algorithms模块的工具依赖")])],-1)),n[71]||(n[71]=o("p",null,"为了更专注DNA组装方案的设计及方案的输出，在序列数据处理、序列优化、Golden Gate overhangs推荐、引物设计等功能上装置设计算法模块直接利用成熟的工具包，主要包括：",-1)),o("ul",null,[o("li",null,[n[30]||(n[30]=o("p",null,"1）序列验证及格式转换功能：定义组装片段时，支持用户上传fasta、SnapGene dna、SBOL、genbank等格式的序列文件，对不符合格式要求的文件进行预警提示，对格式校验通过的序列将统一转换成genbank格式用于下游处理。对以上各格式的校验及转换主要依赖于以下几个python工具包",-1)),o("ul",null,[o("li",null,[n[23]||(n[23]=e("SnapGene ")),n[24]||(n[24]=o("code",null,".dna",-1)),n[25]||(n[25]=e(" 格式校验及解析工具：")),o("a",A,[n[22]||(n[22]=e("SnapGeneReader")),t(r)])]),o("li",null,[n[27]||(n[27]=e("fasta格式校验及解析工具：")),o("a",E,[n[26]||(n[26]=e("py_fasta_validator")),t(r)])]),o("li",null,[n[29]||(n[29]=e("SBOL格式校验及解析工具：")),o("a",N,[n[28]||(n[28]=e("SBOL-Validator API Doc")),t(r)])])])]),o("li",null,[o("p",null,[n[33]||(n[33]=e("2）序列改造/优化功能：DNA组装是合成生物学研究中的重要步骤，其目的是通过将DNA片段按照正确的序列顺序连接起来，重建表达路径或整个基因组的完整序列。在进行DNA组装时，原始测序数据可能存在一些较大的缺陷，因此需要进行序列改造/优化。")),o("a",v,[n[31]||(n[31]=e("dnaChisel")),t(r)]),n[34]||(n[34]=e(" python包提供了一系列功能和算法来使DNA序列修改变得更方便、有效，例如可以从之前构建的基因组进行批量修改或定点修改等。同时，dnaChisel使用基于规则的语法描述器，使用户可以完成类似正则表达式的选择和筛选，从而实现更加精准的序列设计。在装置设计中，我们采取Genbank的注释格式来指定优化参数，")),o("a",k,[n[32]||(n[32]=e("详见手册")),t(r)]),n[35]||(n[35]=e("。"))])]),o("li",null,[o("p",null,[n[39]||(n[39]=e("3）Golden Gate Overhangs推荐功能：Golden Gate组装工艺的效率高度依赖于酶切黏末端的选择，")),o("a",D,[n[36]||(n[36]=e("GoldenHinges")),t(r)]),n[40]||(n[40]=e("（")),o("a",y,[n[37]||(n[37]=e("详见手册")),t(r)]),n[41]||(n[41]=e("）python包支持给定一组约束条件（如GC含量界限、overhangs之间差异、强制或禁用的overhangs）来找到一组有效的、互相兼容的overhangs最大合集。同时可以通过定义片段N个切割区间，在各区间内找到一组兼容的overhangs，这一功能在突变组装中非常适用（突变组装第一步是将原序列片段化）；在多片段的Golden Gate组装中，也可以逆向适用此功能，将临近片段连接位点左右4bp区间看做是最终组装产物的切割区间以找到合适的overhangs。同时我们借鉴了")),o("a",C,[n[38]||(n[38]=e("NEB Ligase Fidelity")),t(r)]),n[42]||(n[42]=e("思路，整合里以下文献的数据集，在相近的反应体系下预测并推荐一组合适的overhangs。"))])])]),o("div",h,[n[52]||(n[52]=s('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Overhang</p>',2)),o("p",null,[n[44]||(n[44]=e("[1] Potapov, V., Ong, J. L., Kucera, R. B., Langhorst, B. W., Bilotti, K., Pryor, J. M., Cantor, E. J., et al. (2018). ")),o("a",G,[n[43]||(n[43]=e("Comprehensive Profiling of Four Base Overhang Ligation Fidelity by T4 DNA Ligase and Application to DNA Assembly.")),t(r)]),n[45]||(n[45]=e(" ACS synthetic biology, 7(11), 2665–2674. United States."))]),o("p",null,[n[47]||(n[47]=e("[2] Potapov, V., Ong, J. L., Langhorst, B. W., Bilotti, K., Cahoon, D., Canton, B., Knight, T. F., et al. (2018). ")),o("a",S,[n[46]||(n[46]=e("A single-molecule sequencing assay for the comprehensive profiling of T4 DNA ligase fidelity and bias during DNA end-joining.")),t(r)]),n[48]||(n[48]=e(" Nucleic acids research, 46(13), e79. England."))]),o("p",null,[n[50]||(n[50]=e("[3] Pryor, J. M., Potapov, V., Kucera, R. B., Bilotti, K., Cantor, E. J., & Lohman, G. J. S. (2020). ")),o("a",L,[n[49]||(n[49]=e("Enabling one-pot Golden Gate assemblies of unprecedented complexity using data-optimized assembly design.")),t(r)]),n[51]||(n[51]=e(" PLOS ONE, 15(9), e0238592. Public Library of Science (PLoS)."))])]),o("ul",null,[o("li",null,[o("p",null,[n[57]||(n[57]=e("4）DNA模拟酶切功能：酶切验证是用于检测 DNA 插入是否成功的一种方法，其作用是通过酶切和凝胶电泳来检测 DNA 是否已经插入到特定的克隆位点中。在装置设计中我们提供了多种产物验证方法，其中酶切验证我们采用")),o("a",P,[n[53]||(n[53]=e("BandWagon")),t(r)]),n[58]||(n[58]=e("（")),o("a",x,[n[54]||(n[54]=e("详见手册")),t(r)]),n[59]||(n[59]=e("）和")),o("a",O,[n[55]||(n[55]=e("BandWitch")),t(r)]),n[60]||(n[60]=e("（")),o("a",w,[n[56]||(n[56]=e("详见手册")),t(r)]),n[61]||(n[61]=e("） python工具包，支持在用户自定义的一组酶中找到最好的一个或数个酶来消化组装产物，达到验证或鉴定的目的。如果没有单一的酶切适用于所有组装产物，用户可设置允许2-3个酶切消化。"))])]),o("li",null,[o("p",null,[n[64]||(n[64]=e("5）引物设计：组装引物、QC质控引物设计依赖于")),o("a",J,[n[62]||(n[62]=e("Primer3-py")),t(r)]),n[65]||(n[65]=e("（")),o("a",R,[n[63]||(n[63]=e("详见手册")),t(r)]),n[66]||(n[66]=e("）"))])])])])}const W=p(m,[["render",F]]),M=JSON.parse('{"path":"/docs/device-design/more/zhuangzhishejigaishu.html","title":"装置设计概述","lang":"en-US","frontmatter":{"title":"装置设计概述","date":"2025/05/22"},"headers":[{"level":2,"title":"DNA组装自动化流程（系统集成）","slug":"dna组装自动化流程-系统集成","link":"#dna组装自动化流程-系统集成","children":[]},{"level":2,"title":"Algorithms模块的工具依赖","slug":"algorithms模块的工具依赖","link":"#algorithms模块的工具依赖","children":[]}],"git":{"createdTime":1748332588000,"updatedTime":1748332588000,"contributors":[{"name":"lld","email":"ld.ling@siat.ac.cn","commits":1}]},"filePathRelative":"docs/device-design/more/装置设计概述.md"}');export{W as comp,M as data};
